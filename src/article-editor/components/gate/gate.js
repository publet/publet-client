/*
 * Publet --- online publishing platform
 * Copyright (C) 2016, Publet Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import React from 'react'
import LayeredComponent from '../../../common/mixins/layered-component/layered-component.js'

// Components
import Modal from '../../../common/components/modal/modal.js'

/*
  Gate thoughts
  After previous thoughts that were dumb (no need for gate while in article
  editor) which means that the gate just needs to be triggered in output via
  public JS.

  Firing Options
    * On click of gate-cta
    * On click of menu item
    * On scroll to 2nd article

  Each of these firing options must be configurable. Use conditional logic in
  output to detect data-ID or class name generated by props.
*/

// Component - Gate
const Gate = React.createClass({
  render() {
    console.log('editor: ' + this.props.editor)
    if (this.props.enabled) {
      return (
        <div id="gate-cta">
          <GateModal
            {...this.props}
          />
        </div>
      )
    }
    return <span />
  }
})

// Component - GateModal
const GateModal = React.createClass({
  render() {
    console.log(this.props.form)
    var formInputs = []
    this.props.form.get('inputs').map((input) => {
      var formInput = (
        <div className={input.get('width')}>
          <div className="input">
            <span style={this.props.form.get('labelStyle').toJS()} className="label">
              {input.get('label')}
            </span>
            <input name={input.get('label')} style={this.props.form.get('inputStyle').toJS()} className="field" type={input.get('type')}/>
          </div>
        </div>
      )
      formInputs.push(formInput)
    })
    var ctaBtnStyle = this.props.form.getIn(['cta', 'style'], {}).toJS()
    return (
      <div
        id="gate-modal"
        className="modal-open"
      >
        <Modal>
          <div className="modal edit-button-style">

            <div
              style={{background: this.props.content.getIn(['titleStyle', 'background'])}}
              className="modal-header grid-block"
            >
              <div style={this.props.content.get('titleStyle').toJS()} className="grid-content">
                {this.props.content.get('title', 'Gate Title')}
              </div>
            </div>

            <div className="grid-block modal-content">
              <div className="analytics grid-content medium-12">
                <h4 style={this.props.content.get('headerStyle').toJS()}>
                  {this.props.content.get('header', 'Gate Header')}
                </h4>
                <p style={this.props.content.get('bodyStyle').toJS()}>
                  {this.props.content.get('body', 'Gate Body Copy')}
                </p>
                <form
                  id="gate-form"
                  className="gate-form"
                  style={this.props.form.get('formStyle').toJS()}
                >
                  {formInputs}
                  <button
                    id="gate-cta-btn"
                    style={ctaBtnStyle}
                    type="submit"
                  >
                    {this.props.form.getIn(['cta', 'label'], 'Default CTA Message')}
                  </button>
                </form>
              </div>
            </div>

          </div>
        </Modal>
      </div>
    )
  }
})

module.exports = Gate

// Trigger stuff - removed as its not implemented
// <div
//   id="gate-modal"
//   className="modal-open"
//   data-trigger-type={this.props.trigger.get('type')}
//   data-trigger-value={this.props.trigger.get('value')}
// >
